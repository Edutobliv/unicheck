openapi: 3.0.3
info:
  title: UniCheck API
  version: 1.1.0
  description: |
    API para autenticación, emisión/validación de QR efímero y gestión de asistencia.

    Seguridad y roles:
    - JWT Bearer con claim `role` ∈ {student, teacher, porter}.
    - Endpoints con `x-roles` requieren ese rol; si no coincide → 403.
    - `/verify` es público; puede incluir Bearer de porter para atribución.
    - Fechas de estudiantes en DD/MM/YYYY.
servers:
  - url: /
    description: Host actual (recomendado para pruebas)
  - url: http://localhost:3000
    description: Desarrollo local
  - url: https://unicheck-api-qr.onrender.com
    description: Render (producción)
tags:
  - name: System
  - name: Auth
  - name: Users
  - name: QR
  - name: Verify
  - name: Professor
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enviar Authorization: Bearer <token> (claim role puede ser requerido)"
  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string, description: Código de error }
        message: { type: string, description: Mensaje legible }
      examples:
        invalid_credentials: { value: { error: invalid_credentials, message: "Usuario o contraseña incorrectos" } }
        forbidden: { value: { error: forbidden, message: "Rol insuficiente" } }
        missing_params: { value: { error: missing_params, message: "Faltan parámetros" } }
    User:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [student, teacher, porter] }
        name: { type: string }
        firstName: { type: string, nullable: true }
        middleName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        secondLastName: { type: string, nullable: true }
        program: { type: string, nullable: true }
        expiresAt: { type: string, nullable: true, description: DD/MM/YYYY }
        photoUrl: { type: string, format: uri, nullable: true }
      example:
        code: STU001
        email: ana.perez@uni.edu
        role: student
        name: Ana Pérez
        program: Ingeniería
        expiresAt: 31/12/2025
        photoUrl: https://.../signed/avatar.jpg
    LoginRequest:
      type: object
      description: Debe incluir `email` o `code` junto con `password`.
      properties:
        email: { type: string, format: email }
        code: { type: string, description: Código institucional }
        password: { type: string }
      required: [password]
      anyOf:
        - required: [email]
        - required: [code]
      example: { email: ana.perez@uni.edu, password: Secreta123 }
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        refreshToken: { type: string }
        user: { $ref: '#/components/schemas/User' }
    RefreshRequest:
      type: object
      properties: { refreshToken: { type: string } }
      required: [refreshToken]
    RefreshResponse:
      type: object
      properties: { token: { type: string }, refreshToken: { type: string } }
    RegisterRequest:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        firstName: { type: string }
        middleName: { type: string, nullable: true }
        lastName: { type: string }
        secondLastName: { type: string, nullable: true }
        password: { type: string }
        program: { type: string, nullable: true }
        expiresAt: { type: string, description: DD/MM/YYYY }
        role: { type: string, enum: [student, teacher, porter], default: student }
        photo:
          type: string
          description: Data URL (image/*;base64,...)
      required: [code, email, name, firstName, lastName, password]
      example:
        code: STU999
        email: nuevo@uni.edu
        name: Nuevo Estudiante
        firstName: Nuevo
        lastName: Estudiante
        password: Secreta123
        program: Ingeniería
        expiresAt: 31/12/2025
        role: student
    RegisterResponse:
      type: object
      properties:
        success: { type: boolean }
        ephemeralCode: { type: string }
        user: { $ref: '#/components/schemas/User' }
    PhotoUrlResponse:
      type: object
      properties:
        photoUrl: { type: string, format: uri, nullable: true }
        expiresIn: { type: integer, description: Segundos }
    PhotoUpdateRequest:
      type: object
      properties:
        photo:
          type: string
          description: Data URL (image/*;base64,...)
      required: [photo]
    IssueEphemeralRequest:
      type: object
      properties:
        deviceId:
          type: string
          description: Identificador del dispositivo del estudiante
    IssueEphemeralResponse:
      type: object
      properties:
        token: { type: string, description: JWT EdDSA efímero }
        qrUrl: { type: string }
        ttl: { type: integer }
        student: { $ref: '#/components/schemas/User' }
        ephemeralCode: { type: string, nullable: true }
    VerifyRequest:
      type: object
      properties:
        token: { type: string }
        gate: { type: string }
        direction: { type: string, enum: [in, out], default: in }
    VerifyResponseValid:
      type: object
      properties:
        valid: { type: boolean, enum: [true] }
        kid: { type: string }
        student: { $ref: '#/components/schemas/User' }
    VerifyResponseInvalid:
      type: object
      properties:
        valid: { type: boolean, enum: [false] }
        reason: { type: string, enum: [missing_token, missing_jti, expired_or_unknown, replayed, invalid_token] }
    Session:
      type: object
      properties:
        id: { type: string, format: uuid }
        teacherCode: { type: string }
        startedAt: { type: integer }
        expiresAt: { type: integer, nullable: true }
    StartSessionRequest:
      type: object
      properties:
        ttlSeconds: { type: integer, minimum: 60, maximum: 3600, default: 600 }
        offeringId: { type: string, format: uuid, nullable: true }
    StartSessionResponse:
      type: object
      properties:
        session: { $ref: '#/components/schemas/Session' }
        qrText: { type: string }
        ttl: { type: integer }
    AttendanceEntry:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        at: { type: integer }
        status: { type: string, nullable: true }
    CheckInRequest:
      type: object
      properties: { sessionToken: { type: string } }
      required: [sessionToken]
paths:
  /health:
    get:
      tags: [System]
      operationId: health
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { ok: { type: boolean } }
  /.well-known/jwks.json:
    get:
      tags: [System]
      operationId: jwks
      summary: JWKS público para validar QR EdDSA
      responses:
        '200': { description: OK }
  /__debug:
    get:
      tags: [System]
      operationId: debug
      summary: Diagnósticos (protegido por x-debug-key)
      parameters:
        - in: header
          name: x-debug-key
          schema: { type: string }
        - in: query
          name: k
          schema: { type: string }
      responses:
        '200': { description: Estado }
  /auth/login:
    post:
      tags: [Auth]
      operationId: authLogin
      security: []
      summary: Iniciar sesión (email o code + password)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Sesión creada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '400': { description: Falta email/código o password, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Usuario o contraseña incorrectos, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: Dominio de email no permitido, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /auth/refresh:
    post:
      tags: [Auth]
      operationId: authRefresh
      security: []
      summary: Renovar token de acceso usando refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        '200': { description: Token renovado, content: { application/json: { schema: { $ref: '#/components/schemas/RefreshResponse' } } } }
        '401': { description: Refresh inválido/expirado/revocado, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /auth/register:
    post:
      tags: [Auth]
      operationId: authRegister
      security: []
      summary: Registrar nuevo usuario (por defecto student)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        '200': { description: Registrado, content: { application/json: { schema: { $ref: '#/components/schemas/RegisterResponse' } } } }
        '400': { description: Faltan campos, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: Usuario ya existe, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /users/me/photo-url:
    get:
      tags: [Users]
      operationId: usersPhotoUrl
      summary: Obtener URL firmada temporal para la foto
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoUrlResponse' } } } }
        '401': { description: No autenticado/Token inválido, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /users/me/photo:
    put:
      tags: [Users]
      operationId: usersPhotoPut
      summary: Reemplazar la foto del usuario (Data URL)
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhotoUpdateRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoUrlResponse' } } } }
        '400': { description: Foto inválida, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: No autenticado/Token inválido, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      tags: [Users]
      operationId: usersPhotoDelete
      summary: Eliminar la foto del usuario
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, deleted: { type: boolean } } } } } }
        '401': { description: No autenticado/Token inválido, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /issue-ephemeral:
    post:
      tags: [QR]
      operationId: qrIssue
      summary: Emitir token/QR efímero (solo student)
      description: Requiere rol student en el JWT
      security: [ { bearerAuth: [] } ]
      x-roles: [student]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/IssueEphemeralRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IssueEphemeralResponse' } } } }
        '401': { description: No autenticado/Token inválido, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: Rol insuficiente (se requiere student), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /verify:
    post:
      tags: [Verify]
      operationId: qrVerify
      summary: Verificar QR efímero
      description: |
        Acepta token en el cuerpo (token) o query t.
        Puede incluir Authorization: Bearer ... de un porter para atribuir el evento.
      parameters:
        - in: query
          name: t
          required: false
          schema: { type: string }
        - in: query
          name: gate
          required: false
          schema: { type: string }
        - in: query
          name: direction
          required: false
          schema: { type: string, enum: [in, out] }
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VerifyRequest' }
      responses:
        '200':
          description: Resultado de verificación
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VerifyResponseValid'
                  - $ref: '#/components/schemas/VerifyResponseInvalid'
        '401': { description: Token inválido }
  /prof/start-session:
    post:
      tags: [Professor]
      operationId: profStartSession
      summary: Iniciar sesión de clase (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StartSessionRequest' }
      responses:
        '200': { description: Sesión iniciada, content: { application/json: { schema: { $ref: '#/components/schemas/StartSessionResponse' } } } }
        '401': { description: No autenticado/Token inválido }
        '403': { description: Rol insuficiente (se requiere teacher) }
  /prof/end-session:
    post:
      tags: [Professor]
      operationId: profEndSession
      summary: Finalizar sesión (solo teacher)
      description: Acepta sessionId en body o id por query
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: { sessionId: { type: string } }
      parameters:
        - in: query
          name: id
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, session: { $ref: '#/components/schemas/Session' }, attendees: { type: array, items: { $ref: '#/components/schemas/AttendanceEntry' } } } } } } }
        '401': { description: No autenticado/Token inválido }
        '403': { description: Rol insuficiente (se requiere teacher) }
        '404': { description: Sesión no encontrada }
  /attendance/check-in:
    post:
      tags: [Professor]
      operationId: attendanceCheckIn
      summary: Check-in del alumno (solo student)
      security: [ { bearerAuth: [] } ]
      x-roles: [student]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CheckInRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, sessionId: { type: string }, entry: { $ref: '#/components/schemas/AttendanceEntry' } } } } } }
        '400': { description: Token de sesión inválido/expirado o falta sessionToken }
        '401': { description: No autenticado/Token inválido }
        '404': { description: Sesión no encontrada }
  /prof/session/{id}:
    get:
      tags: [Professor]
      operationId: profGetSession
      summary: Obtener sesión y asistentes (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { session: { $ref: '#/components/schemas/Session' }, attendees: { type: array, items: { $ref: '#/components/schemas/AttendanceEntry' } } } } } } }
        '401': { description: No autenticado/Token inválido }
        '403': { description: Rol insuficiente (se requiere teacher) }
        '404': { description: Sesión no encontrada }
  /prof/attendance/add:
    post:
      tags: [Professor]
      operationId: profAttendanceAdd
      summary: Añadir asistencia manual (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId: { type: string }
                code: { type: string }
                email: { type: string, format: email }
            examples:
              byCode: { value: { sessionId: 2c8c5235-1e3d-4cc7-9f67-1e6bb8a409e1, code: STU001 } }
              byEmail: { value: { sessionId: 2c8c5235-1e3d-4cc7-9f67-1e6bb8a409e1, email: ana.perez@uni.edu } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, entry: { $ref: '#/components/schemas/AttendanceEntry' } } } } } }
        '400': { description: Parámetros faltantes }
        '401': { description: No autenticado/Token inválido }
        '403': { description: Rol insuficiente (se requiere teacher) }
        '404': { description: Sesión o estudiante no encontrado }
  /prof/attendance:
    delete:
      tags: [Professor]
      operationId: profAttendanceDelete
      summary: Eliminar asistencia (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId: { type: string }
                studentCode: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean } } } } } }
        '400': { description: Parámetros faltantes }
        '401': { description: No autenticado/Token inválido }
        '403': { description: Rol insuficiente (se requiere teacher) }
        '404': { description: Sesión no encontrada }
  /prof/students/search:
    get:
      tags: [Professor]
      operationId: profStudentsSearch
      summary: Buscar estudiantes (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          example: ana
      responses:
        '200':
          description: Resultados
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        code: { type: string }
                        email: { type: string, format: email }
                        name: { type: string }
