openapi: 3.0.3
info:
  title: UniCheck API
  version: 1.2.0
  description: |
    API para autenticacion, emision/validacion de QR efimero y gestion de asistencia.

    Seguridad y roles:
    - Autenticacion JWT Bearer (HS256) con claim `role` en {student, teacher, porter}.
    - Endpoints con `x-roles` requieren ese rol en el token.
    - `/verify` es publico; puede incluir Bearer de porter para atribucion.
    - Fechas de estudiantes en formato DD/MM/YYYY.
  contact:
    name: UniCheck Maintainers
    url: https://github.com/Edutobliv/unicheck
  license:
    name: MIT
servers:
  - url: /
    description: Host actual (recomendado para pruebas)
  - url: http://localhost:3000
    description: Desarrollo local
  - url: https://unicheck-api-qr.onrender.com
    description: Render (produccion)
tags:
  - name: System
    description: Salud y metadatos del servicio
  - name: Auth
    description: Registro, login, refresh y reset de contrasena
  - name: Users
    description: Perfil del usuario autenticado (foto)
  - name: QR
    description: Emision de QR efimero por estudiantes
  - name: Verify
    description: Verificacion de QR en porteria/acceso
  - name: Professor
    description: Sesiones de clase y asistencia (rol teacher)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enviar `Authorization: Bearer <token>`
    DebugKey:
      type: apiKey
      in: header
      name: x-debug-key
      description: Clave para endpoint de diagnostico (`/__debug`)
  parameters:
    QParam:
      in: query
      name: q
      required: false
      schema: { type: string }
      description: Termino de busqueda (email, nombre o codigo)
    SessionIdInPath:
      in: path
      name: id
      required: true
      schema: { type: string }
    VerifyTokenInQuery:
      in: query
      name: t
      required: false
      schema: { type: string }
    GateInQuery:
      in: query
      name: gate
      required: false
      schema: { type: string }
    DirectionInQuery:
      in: query
      name: direction
      required: false
      schema: { type: string, enum: [in, out] }
  responses:
    Unauthorized:
      description: No autenticado o token invalido
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Forbidden:
      description: Rol insuficiente
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ValidationError:
      description: Datos invalidos o faltantes
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string, description: Codigo de error }
        message: { type: string, description: Mensaje legible }
    User:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [student, teacher, porter] }
        name: { type: string }
        firstName: { type: string, nullable: true }
        middleName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        secondLastName: { type: string, nullable: true }
        program: { type: string, nullable: true }
        expiresAt: { type: string, nullable: true, description: DD/MM/YYYY }
        photoUrl: { type: string, format: uri, nullable: true }
      example:
        code: STU001
        email: ana.perez@uni.edu
        role: student
        name: Ana Perez
        program: Ingenieria
        expiresAt: 31/12/2025
        photoUrl: https://.../signed/avatar.jpg
    TokenPair:
      type: object
      properties:
        token: { type: string, description: Access token (HS256) }
        refreshToken: { type: string }
    LoginRequest:
      type: object
      description: Debe incluir `email` o `code` junto con `password`.
      properties:
        email: { type: string, format: email }
        code: { type: string, description: Codigo institucional }
        password: { type: string }
      required: [password]
      anyOf:
        - required: [email]
        - required: [code]
      example: { email: valentina.martinez@upc.edu.co, password: password123 }
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/TokenPair'
        - type: object
          properties:
            user: { $ref: '#/components/schemas/User' }
    RefreshRequest:
      type: object
      properties: { refreshToken: { type: string } }
      required: [refreshToken]
    RefreshResponse:
      $ref: '#/components/schemas/TokenPair'
    RegisterRequest:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        firstName: { type: string }
        middleName: { type: string, nullable: true }
        lastName: { type: string }
        secondLastName: { type: string, nullable: true }
        password: { type: string }
        program: { type: string, nullable: true }
        expiresAt: { type: string, description: DD/MM/YYYY }
        role: { type: string, enum: [student, teacher, porter], default: student }
        photo:
          type: string
          description: Data URL (image/*;base64,...)
      required: [code, email, name, firstName, lastName, password]
      example:
        code: STU999
        email: nuevo@uni.edu
        name: Nuevo Estudiante
        firstName: Nuevo
        lastName: Estudiante
        password: password123
        program: Ingenieria
        expiresAt: 31/12/2025
        role: student
    RegisterResponse:
      type: object
      properties:
        success: { type: boolean }
        ephemeralCode: { type: string }
        user: { $ref: '#/components/schemas/User' }
    PhotoUrlResponse:
      type: object
      properties:
        photoUrl: { type: string, format: uri, nullable: true }
        expiresIn: { type: integer, description: Segundos }
    PhotoUpdateRequest:
      type: object
      properties:
        photo:
          type: string
          description: Data URL (image/*;base64,...)
      required: [photo]
    IssueEphemeralRequest:
      type: object
      properties:
        deviceId: { type: string, description: Identificador del dispositivo del estudiante }
    IssueEphemeralResponse:
      type: object
      properties:
        token: { type: string, description: JWT EdDSA efimero }
        qrUrl: { type: string }
        ttl: { type: integer }
        student: { $ref: '#/components/schemas/User' }
        ephemeralCode: { type: string, nullable: true }
    VerifyRequest:
      type: object
      properties:
        token: { type: string }
        gate: { type: string }
        direction: { type: string, enum: [in, out], default: in }
    VerifyResponseValid:
      type: object
      properties:
        valid: { type: boolean, enum: [true] }
        kid: { type: string }
        student: { $ref: '#/components/schemas/User' }
    VerifyResponseInvalid:
      type: object
      properties:
        valid: { type: boolean, enum: [false] }
        reason: { type: string, enum: [missing_token, missing_jti, expired_or_unknown, replayed, invalid_token] }
    Session:
      type: object
      properties:
        id: { type: string, format: uuid }
        teacherCode: { type: string }
        startedAt: { type: integer }
        expiresAt: { type: integer, nullable: true }
    StartSessionRequest:
      type: object
      properties:
        ttlSeconds: { type: integer, minimum: 60, maximum: 3600, default: 600 }
        offeringId: { type: string, format: uuid, nullable: true }
    StartSessionResponse:
      type: object
      properties:
        session: { $ref: '#/components/schemas/Session' }
        qrText: { type: string }
        ttl: { type: integer }
    AttendanceEntry:
      type: object
      properties:
        code: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        at: { type: integer }
        status: { type: string, nullable: true }
    CheckInRequest:
      type: object
      properties: { sessionToken: { type: string } }
      required: [sessionToken]
    StudentSearchResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              code: { type: string }
              email: { type: string, format: email }
              name: { type: string }
    DebugStatusResponse:
      type: object
      properties:
        ok: { type: boolean }
        env:
          type: object
          properties:
            hasDatabaseUrl: { type: boolean }
            hasSupabaseUrl: { type: boolean }
            hasSupabaseServiceRole: { type: boolean }
            avatarBucket: { type: string }
            baseUrl: { type: string }
        db:
          type: object
          properties:
            ok: { type: boolean }
            now: { type: string, nullable: true }
            error: { type: string, nullable: true }
        storage:
          type: object
          properties:
            ok: { type: boolean }
            sample: { type: string, nullable: true }
            error: { type: string, nullable: true }
    JWKS:
      type: object
      properties:
        keys:
          type: array
          items: { type: object }
paths:
  /health:
    get:
      tags: [System]
      operationId: health
      summary: Verificar salud del servicio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { ok: { type: boolean } }
        '500': { $ref: '#/components/responses/ServerError' }
  /.well-known/jwks.json:
    get:
      tags: [System]
      operationId: jwks
      summary: JWKS publico para validar QR EdDSA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/JWKS' }
        '500': { $ref: '#/components/responses/ServerError' }
  /__debug:
    get:
      tags: [System]
      operationId: debug
      summary: Diagnosticos (protegido por x-debug-key)
      parameters:
        - in: header
          name: x-debug-key
          schema: { type: string }
        - in: query
          name: k
          schema: { type: string }
      responses:
        '200': { description: Estado, content: { application/json: { schema: { $ref: '#/components/schemas/DebugStatusResponse' } } } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/login:
    post:
      tags: [Auth]
      operationId: authLogin
      security: []
      summary: Iniciar sesion (email o codigo + password)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200': { description: Sesion creada, content: { application/json: { schema: { $ref: '#/components/schemas/LoginResponse' } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/refresh:
    post:
      tags: [Auth]
      operationId: authRefresh
      security: []
      summary: Renovar token de acceso usando refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        '200': { description: Token renovado, content: { application/json: { schema: { $ref: '#/components/schemas/RefreshResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/register:
    post:
      tags: [Auth]
      operationId: authRegister
      security: []
      summary: Registrar nuevo usuario (por defecto student)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        '200': { description: Registrado, content: { application/json: { schema: { $ref: '#/components/schemas/RegisterResponse' } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '409': { description: Usuario ya existe, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/password-reset/request:
    post:
      tags: [Auth]
      operationId: passwordResetRequest
      security: []
      summary: Solicitar codigo de reset (via Supabase)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                code: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, maskedEmail: { type: string, nullable: true } } } } } }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/password-reset/confirm:
    post:
      tags: [Auth]
      operationId: passwordResetConfirm
      security: []
      summary: Confirmar reset con OTP (flujo preflight o directo)
      description: |
        - Preflight: enviar { email/code, otp, dryRun:true } para validar OTP y obtener `preflightToken` (5 min).
        - Final: enviar { preflightToken, newPassword, otp } para actualizar contrasena.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                code: { type: string }
                otp: { type: string }
                newPassword: { type: string }
                dryRun: { type: boolean }
                preflightToken: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, dryRun: { type: boolean, nullable: true }, preflightToken: { type: string, nullable: true } } } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /users/me/photo-url:
    get:
      tags: [Users]
      operationId: usersPhotoUrl
      summary: Obtener URL firmada temporal para la foto
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoUrlResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /users/me/photo:
    put:
      tags: [Users]
      operationId: usersPhotoPut
      summary: Reemplazar la foto del usuario (Data URL)
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhotoUpdateRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoUrlResponse' } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
    delete:
      tags: [Users]
      operationId: usersPhotoDelete
      summary: Eliminar la foto del usuario
      security: [ { bearerAuth: [] } ]
      x-roles: [student, teacher, porter]
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, deleted: { type: boolean } } } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /issue-ephemeral:
    post:
      tags: [QR]
      operationId: qrIssue
      summary: Emitir token/QR efimero (solo student)
      description: Requiere rol student en el JWT
      security: [ { bearerAuth: [] } ]
      x-roles: [student]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/IssueEphemeralRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IssueEphemeralResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /verify:
    post:
      tags: [Verify]
      operationId: qrVerify
      summary: Verificar QR efimero
      description: |
        Acepta token en el cuerpo (`token`) o parametro de query `t`.
        Puede incluir `Authorization: Bearer ...` (porter) para atribuir el evento.
      parameters:
        - $ref: '#/components/parameters/VerifyTokenInQuery'
        - $ref: '#/components/parameters/GateInQuery'
        - $ref: '#/components/parameters/DirectionInQuery'
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VerifyRequest' }
      responses:
        '200':
          description: Resultado de verificacion
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VerifyResponseValid'
                  - $ref: '#/components/schemas/VerifyResponseInvalid'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/start-session:
    post:
      tags: [Professor]
      operationId: profStartSession
      summary: Iniciar sesion de clase (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StartSessionRequest' }
      responses:
        '200': { description: Sesion iniciada, content: { application/json: { schema: { $ref: '#/components/schemas/StartSessionResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/end-session:
    post:
      tags: [Professor]
      operationId: profEndSession
      summary: Finalizar sesion (solo teacher)
      description: Acepta `sessionId` en body o `id` por query
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: { sessionId: { type: string } }
      parameters:
        - in: query
          name: id
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, session: { $ref: '#/components/schemas/Session' }, attendees: { type: array, items: { $ref: '#/components/schemas/AttendanceEntry' } } } } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /attendance/check-in:
    post:
      tags: [Professor]
      operationId: attendanceCheckIn
      summary: Check-in del alumno (solo student)
      security: [ { bearerAuth: [] } ]
      x-roles: [student]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CheckInRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, sessionId: { type: string }, entry: { $ref: '#/components/schemas/AttendanceEntry' } } } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/session/{id}:
    get:
      tags: [Professor]
      operationId: profGetSession
      summary: Obtener sesion y asistentes (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      parameters:
        - $ref: '#/components/parameters/SessionIdInPath'
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { session: { $ref: '#/components/schemas/Session' }, attendees: { type: array, items: { $ref: '#/components/schemas/AttendanceEntry' } } } } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/attendance/add:
    post:
      tags: [Professor]
      operationId: profAttendanceAdd
      summary: Aniadir asistencia manual (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId: { type: string }
                code: { type: string }
                email: { type: string, format: email }
            examples:
              byCode: { value: { sessionId: 2c8c5235-1e3d-4cc7-9f67-1e6bb8a409e1, code: STU001 } }
              byEmail: { value: { sessionId: 2c8c5235-1e3d-4cc7-9f67-1e6bb8a409e1, email: ana.perez@uni.edu } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean }, entry: { $ref: '#/components/schemas/AttendanceEntry' } } } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/attendance:
    delete:
      tags: [Professor]
      operationId: profAttendanceDelete
      summary: Eliminar asistencia (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId: { type: string }
                studentCode: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { ok: { type: boolean } } } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }
  /prof/students/search:
    get:
      tags: [Professor]
      operationId: profStudentsSearch
      summary: Buscar estudiantes (solo teacher)
      security: [ { bearerAuth: [] } ]
      x-roles: [teacher]
      parameters:
        - $ref: '#/components/parameters/QParam'
      responses:
        '200': { description: Resultados, content: { application/json: { schema: { $ref: '#/components/schemas/StudentSearchResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

